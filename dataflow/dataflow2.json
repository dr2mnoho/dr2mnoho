{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlDB",
						"type": "DatasetReference"
					},
					"name": "emp"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "dept"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText4",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "lookup"
				},
				{
					"name": "CheckMatch"
				},
				{
					"name": "IsMatch"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          fname as string,",
				"          lname as string,",
				"          salary as decimal(18,0),",
				"          city as string,",
				"          deptId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> emp",
				"source(output(",
				"          id as integer,",
				"          term_date as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dept",
				"emp, dept lookup(deptId == dept@id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'right')~> lookup",
				"lookup derive(match = isMatch()) ~> CheckMatch",
				"CheckMatch split(match,",
				"     disjoint: true) ~> IsMatch@(isMatch, NoMatch)",
				"IsMatch@isMatch sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"IsMatch@NoMatch sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Correlationid as string,",
				"          Operationname as string,",
				"          Status as string,",
				"          Eventcategory as string,",
				"          Level as string,",
				"          Time as string,",
				"          Subscription as string,",
				"          Eventinitiatedby as string,",
				"          Resourcetype as string,",
				"          Resourcegroup as string,",
				"          Resource as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}